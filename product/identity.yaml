# Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  WSO2 Identity Server deployment with Clustering
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Basic Configuration
        Parameters:
          - AWSAccessKeyId
          - AWSAccessKeySecret
          - KeyPairName
          - WSO2InstanceType
          - CertificateName
          - WSO2ISDBInstanceEndpointAddress
          - WSO2ISDBInstanceEndpointPort
          - DB
          - DBUsername
          - DBPassword
      - Label:
          default: Advanced Configuration
        Parameters:
          - OperatingSystem
          - CustomUserData
          - JDK
          - ElasticSearchEndpoint
          - ElasticSearchRegion
          - WSO2ISVPC
          - WSO2ISPrivateSubnet1
          - WSO2ISPrivateSubnet2
          - WSO2ISPublicSubnet1
          - WSO2ISPublicSubnet2
    ParameterLabels:
      AWSAccessKeyId:
        default: AWS Access Key ID
      AWSAccessKeySecret:
        default: AWS Access Secret Key
      OperatingSystem:
        default: Operating System
      CertificateName:
        default: SSL Certificate Name
      WSO2ISDBInstanceEndpointAddress:
        default: DBInstance Endpoint Address
      WSO2ISDBInstanceEndpointPort:
        default: DBInstance Port
      KeyPairName:
        default: Key Pair Name
      DBUsername:
        default: DB Username
      DBPassword:
        default: DB Password
      JDK:
        default: JDK
      InternalPrepareForTest:
        default: Enable Test Mode
      CustomUserData:
        default: Customer User Data
      WSO2InstanceType:
        default: Instance Type
      DB:
        default: Database
      ElasticSearchEndpoint:
        default: ElasticSearch Endpoint
      ElasticSearchRegion:
        default: ElasticSearch Region
      WSO2ISVPC:
        default: VPC ID
      WSO2ISPrivateSubnet1:
        default: WSO2 Private Subnet 1 - ID
      WSO2ISPrivateSubnet2:
        default: WSO2 Private Subnet 2 - ID
      WSO2ISPublicSubnet1:
        default: WSO2 Public Subnet 1 - ID
      WSO2ISPublicSubnet2:
        default: WSO2 Public Subnet 2 - ID
Resources:
  # File system configurations
  WSO2ISEFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2ISVPC
      GroupDescription: EFS Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
  WSO2ISEFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
  WSO2ISPrivateSubnet1EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref WSO2ISPrivateSubnet1
      FileSystemId: !Ref WSO2ISEFSFileSystem
      SecurityGroups:
        - !Ref WSO2ISEFSSecurityGroup
  WSO2ISPrivateSubnet2EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref WSO2ISPrivateSubnet2
      FileSystemId: !Ref WSO2ISEFSFileSystem
      SecurityGroups:
        - !Ref WSO2ISEFSSecurityGroup
  # Product configurations
  WSO2ISSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2ISVPC
      GroupDescription: WSO2 Identity Manager Security Group
      GroupName: WSO2SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          SourceSecurityGroupId: !Ref WSO2ISLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          SourceSecurityGroupId: !Ref WSO2ISLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          SourceSecurityGroupId: !Ref WSO2ISLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          SourceSecurityGroupId: !Ref WSO2ISLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '5672'
          ToPort: '5672'
          SourceSecurityGroupId: !Ref WSO2ISLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '4100'
          ToPort: '4100'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5701'
          ToPort: '5701'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
  PuppetMaster:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2PuppetMasterRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu1804
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: PuppetMasterInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2ISPrivateSubnet1
          GroupSet:
            - !Ref PuppetMasterSecurityGroup
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            - apt-get update
            - apt-get -y install python-setuptools python-pip
            - pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            - 'export PATH=~/.local/bin:$PATH'
            - echo "> Set hostname to puppetmaster"
            - hostname puppetmaster
            - echo $(hostname) >> /etc/hostname
            - echo "127.0.0.1 $(hostname)" >> /etc/hosts
            - !Join
              - ''
              - - sed -i "s/access-key/
                - !Ref AWSAccessKeyId
                - /g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s/REGION_NAME/
                - !Ref ElasticSearchRegion
                - /g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s^secret-key^
                - !Ref AWSAccessKeySecret
                - ^g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s^STACK_NAME^
                - !Ref AWS::StackName
                - ^g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s^ELASTICSEARCH_ENDPOINT^
                - !Ref ElasticSearchEndpoint
                - ^g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - export INSTANCEID=$(ec2metadata | grep -m 1 'instance-id:' | awk '{print $2}')
            - sed -i "s/INSTANCE_ID/$INSTANCEID/g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - apt-get update
            - apt install openjdk-8-jre-headless -y
            - nohup /usr/lib/logstash-6.5.1/bin/logstash -f /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf & >> /home/ubuntu/elastic.log
            - sed -i '/\[main\]/a dns_alt_names=puppetmaster,puppet' /etc/puppet/puppet.conf
            - sed -i '/\[master\]/a autosign=true' /etc/puppet/puppet.conf
            - service puppetmaster restart
            - cd /home/ubuntu
            - !Sub "./wso2-init.sh wso2is-5.10.0"
            - !Sub "/usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource PuppetMaster --region ${AWS::Region}"
            - !Join
              - ''
              - - sed -i "s/access-key/
                - !Ref AWSAccessKeyId
                - /g" /etc/puppet/code/environments/production/modules/is5100/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/REGION_NAME/
                - !Ref "AWS::Region"
                - /g" /etc/puppet/code/environments/production/modules/is5100/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_ELB_DNS_NAME/
                - !GetAtt
                  - WSO2ISLoadBalancer
                  - DNSName
                - >-
                  /g"
                  /etc/puppet/code/environments/production/modules/is5100/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /etc/puppet/code/environments/production/modules/is5100/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /etc/puppet/code/environments/production/modules/is5100/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DBMS/
                - !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /etc/puppet/code/environments/production/modules/is5100/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_RDS_URL/
                - !Ref WSO2ISDBInstanceEndpointAddress
                - /g" /etc/puppet/code/environments/production/modules/is5100/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s^secretkey^
                - !Ref AWSAccessKeySecret
                - ^g" /etc/puppet/code/environments/production/modules/is5100/manifests/params.pp
            - export DB_NAME=WSO2_IS_DB
            - !Join
              - ''
              - - sed -i "s/JDK_TYPE/
                - !Ref JDK
                - /g" /etc/puppet/code/environments/production/modules/is5100/manifests/params.pp
            - !Join
              - ''
              - - export DB_HOSTNAME=
                - !Ref WSO2ISDBInstanceEndpointAddress
            - !Join
              - ''
              - - export DB_PORT=
                - !Ref WSO2ISDBInstanceEndpointPort
            - !Join
              - ''
              - - export DB_USERNAME=
                - !Ref DBUsername
            - !Join
              - ''
              - - export DB_PASSWORD=
                - !Ref DBPassword
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /usr/local/bin/provision_db_is.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /usr/local/bin/provision_db_is.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_HOST/
                - !Ref WSO2ISDBInstanceEndpointAddress
                - /g" /usr/local/bin/provision_db_is.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PORT/
                - !Ref WSO2ISDBInstanceEndpointPort
                - /g" /usr/local/bin/provision_db_is.sh
            - !Join
              - ''
              - - sed -i "s/CF_DBMS_NAME/
                - !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /usr/local/bin/provision_db_is.sh
            - !Join
              - ''
              - - sed -i "s/CF_DBMS_VERSION/
                - !Select [1, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /usr/local/bin/provision_db_is.sh
            - !Join
              - ''
              - - sed -i "s/CF_PRODUCT_VERSION/
                - 5.10.0
                - /g" /usr/local/bin/provision_db_is.sh
            - bash /usr/local/bin/provision_db_is.sprovision_db_is.sh
  PuppetMasterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2ISVPC
      GroupDescription: WSO2 PuppetMaster Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: 0.0.0.0/0
  WSO2ISNode1LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2ISAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2ISSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          export PATH=~/.local/bin:$PATH
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt install -y puppet nfs-common
              apt install -y python-pip
              sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              yum install -y epel-release zip unzip nfs-utils
              yum install -y python-pip
              rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
              yum install -y puppet-agent
              echo $'[main]\nserver = puppet\ncertname = agent1\nenvironment = production\n\runinterval = 1h' > /etc/puppetlabs/puppet/puppet.conf
          fi
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          wget https://s3.amazonaws.com/wso2logarchiever/log_archiver/log_archiver.sh
          mv log_archiver.sh /usr/lib/
          export ProductVersion=5.10.0
          sed -i "s/Product_Version/5.10.0/g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          sed -i "s^secret-key^${AWSAccessKeySecret}^g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          sed -i "s/access-key/${AWSAccessKeyId}/g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          sed -i "s^ELASTICSEARCH_ENDPOINT^${ElasticSearchEndpoint}^g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          export INSTANCEID=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
          sed -i "s/INSTANCE_ID/$INSTANCEID/g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          sed -i "s/STACK_NAME/${AWS::StackName}/g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          sed -i "s/REGION_NAME/${ElasticSearchRegion}/g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          nohup /usr/lib/logstash-6.5.1/bin/logstash -f /usr/lib/logstash-6.5.1/logstash-IS.conf &
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          service puppet restart
          mkdir -p /mnt/efs
          mount -t nfs4 -o nfsvers=4.1 ${WSO2ISEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          sleep 100
          export FACTER_profile=is5100
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              puppet agent -vt >> /var/log/puppetlog.log
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /opt/puppetlabs/bin/puppet agent -vt >> /var/log/puppetlog.log
          fi
          sleep 10
          if [ ! -d "/mnt/efs/server/userstores" ]; then
              mkdir -p /mnt/efs/server/userstores
              cp -r /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/deployment/server/userstores /mnt/efs/userstores
          fi
          rm -rf  /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/deployment/server/userstores
          ln -s /mnt/efs/server/userstores /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/deployment/server/userstores
          if [ ! -d "/mnt/efs/tenants" ]; then
              mkdir -p /mnt/efs/tenants
              cp -r /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/tenants /mnt/efs
          fi
          rm -rf /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/tenants
          ln -s /mnt/efs/tenants /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/tenants
          echo "${WSO2ISEFSFileSystem}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/bin/wso2server.sh start
          ${CustomUserData}
          sleep 30
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2ISNode1AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2ISNode1AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2ISSecurityGroup
      - WSO2ISLoadBalancer
      - PuppetMaster
  WSO2ISNode1AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2ISNode1LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 2
      TargetGroupARNs:
        - !Ref WSO2ISALBTargetGroup
      VPCZoneIdentifier:
        - !Ref WSO2ISPrivateSubnet1
      Tags:
        - Key: Name
          Value: WSO2ISInstance1
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: is
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2ISLoadBalancer
  WSO2ISNode2LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2ISAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2ISSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          export PATH=~/.local/bin:$PATH
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt install -y puppet nfs-common
              apt install -y python-pip
              sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              yum install -y epel-release zip unzip nfs-utils
              yum install -y python-pip
              rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
              yum install -y puppet-agent
              echo $'[main]\nserver = puppet\ncertname = agent2\nenvironment = production\n\runinterval = 1h' > /etc/puppetlabs/puppet/puppet.conf
          fi
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          wget https://s3.amazonaws.com/wso2logarchiever/log_archiver/log_archiver.sh
          mv log_archiver.sh /usr/lib/
          export ProductVersion=5.10.0
          sed -i "s/Product_Version/5.10.0/g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          sed -i "s^secret-key^${AWSAccessKeySecret}^g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          sed -i "s/access-key/${AWSAccessKeyId}/g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          sed -i "s^ELASTICSEARCH_ENDPOINT^${ElasticSearchEndpoint}^g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          export INSTANCEID=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
          sed -i "s/INSTANCE_ID/$INSTANCEID/g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          sed -i "s/STACK_NAME/${AWS::StackName}/g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          sed -i "s/REGION_NAME/${ElasticSearchRegion}/g" /usr/lib/logstash-6.5.1/logstash-IS.conf
          nohup /usr/lib/logstash-6.5.1/bin/logstash -f /usr/lib/logstash-6.5.1/logstash-IS.conf &
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          service puppet restart
          mkdir -p /mnt/efs
          mount -t nfs4 -o nfsvers=4.1 ${WSO2ISEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          sleep 300
          export FACTER_profile=is5100
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              puppet agent -vt >> /var/log/puppetlog.log
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /opt/puppetlabs/bin/puppet agent -vt >> /var/log/puppetlog.log
          fi
          sleep 10
          if [ ! -d "/mnt/efs/server/userstores" ]; then
              mkdir -p /mnt/efs/server/userstores
              cp -r /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/deployment/server/userstores /mnt/efs/userstores
          fi
          rm -rf  /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/deployment/server/userstores
          ln -s /mnt/efs/server/userstores /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/deployment/server/userstores
          if [ ! -d "/mnt/efs/tenants" ]; then
              mkdir -p /mnt/efs/tenants
              cp -r /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/tenants /mnt/efs
          fi
          rm -rf /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/tenants
          ln -s /mnt/efs/tenants /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/repository/tenants
          echo "${WSO2ISEFSFileSystem}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          /usr/lib/wso2/wso2is/5.10.0/wso2is-5.10.0/bin/wso2server.sh start
          ${CustomUserData}
          sleep 30
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2ISNode2AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2ISNode2AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2ISSecurityGroup
      - WSO2ISLoadBalancer
      - PuppetMaster
  WSO2ISNode2AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2ISNode2LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 2
      TargetGroupARNs:
        - !Ref WSO2ISALBTargetGroup
      VPCZoneIdentifier:
        - !Ref WSO2ISPrivateSubnet2
      Tags:
        - Key: Name
          Value: WSO2ISInstance2
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: is
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2ISLoadBalancer
  WSO2ISLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2ISVPC
      GroupDescription: WSO2 IS ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5701'
          ToPort: '5701'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5701'
          ToPort: '5701'
          CidrIp: 0.0.0.0/0
  WSO2ISLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: IS
      Scheme: internet-facing
      Subnets:
        - !Ref WSO2ISPublicSubnet1
        - !Ref WSO2ISPublicSubnet2
      SecurityGroups:
        - !Ref WSO2ISLoadBalancerSecurityGroup
  WSO2ISALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /carbon/admin/login.jsp
      HealthCheckPort: 9443
      Matcher:
        HttpCode: 200
      Name: is-carbon-9443
      Port: 9443
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2ISVPC
      Tags:
      - Key: Name
        Value: is
  WSO2ISALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2ISALBTargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2ISLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2ISLoadBalancerSecurityGroup
Outputs:
  MgtConsoleUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2ISLoadBalancer
          - DNSName
        - '/carbon'
    Description: Identity Server Management Console URL
  CarbonServerUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2ISLoadBalancer
          - DNSName
        - '/services'
    Description: Carbon Server URL
  ISHttpUrl:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WSO2ISLoadBalancer
          - DNSName
        - ':80'
    Description: IS HTTP Gateway endpoint
  ISHttpsUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2ISLoadBalancer
          - DNSName
        - ':443'
    Description: IS HTTPS Gateway endpoint
Parameters:
  AWSAccessKeyId:
    Type: String
  AWSAccessKeySecret:
    Type: String
  KeyPairName:
    Description: >-
      The private key used to log in to instances through SSH
    Type: 'AWS::EC2::KeyPair::KeyName'
  CertificateName:
    Description: A valid SSL certificate used for HTTPS
    Type: String
    MinLength: 1
  WSO2InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
    ConstraintDescription: Must be a valid EC2 instance type
  CustomUserData:
    Type: String
    Default: "echo"
  JDK:
    Type: String
    Default: "OPEN_JDK8"
    AllowedValues:
      - "OPEN_JDK8"
      - "ORACLE_JDK8"
      - "CORRETTO_JDK8"
      - "ADOPT_OPEN_JDK11"
  ElasticSearchEndpoint:
    Type: String
    Default: ""
  WSO2ISDBInstanceEndpointAddress:
    Type: String
  WSO2ISDBInstanceEndpointPort:
    Type: String
  DBUsername:
    Type: String
    MinLength: 4
    AllowedPattern: '[A-Za-z0-9\-]+'
  DBPassword:
    Type: String
    MinLength: 8
    NoEcho: true
  DB:
    Type: String
    Default: MySQL-5.7
    AllowedValues:
      - MySQL-5.7
      - Postgres-9.6
      - Postgres-10.5
      - Oracle-SE1-11.2
      - Oracle-SE2-12.1
      - SQLServer-SE-13.00
      - SQLServer-SE-14.00
  OperatingSystem:
    Type: String
    Default: Ubuntu1804
    AllowedValues:
      - Ubuntu1804
      - CentOS7
  ElasticSearchRegion:
    Type: String
    Default: "us-east-1"
    AllowedValues:
      - "us-east-1"
      - "us-east-2"
      - "us-west-1"
      - "us-west-2"
      - "ap-southeast-2"
      - "eu-west-1"
  WSO2ISVPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID of your existing Virtual Private Cloud (VPC)
  WSO2ISPrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet for PuppetMaster, Prodcut Instance, EFS and the DB
  WSO2ISPrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet for Prodcut Instance and the DB
  WSO2ISPublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet for NAT Gateway, Bastion Instance and Load Balancer
  WSO2ISPublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet for Load Balancer
Mappings:
  WSO2PuppetMasterRegionMap:
    ap-southeast-2:
      Ubuntu1804: ami-0a2861870d74512ea
    eu-west-1:
      Ubuntu1804: ami-0463af6f305249b62
    us-east-1:
      Ubuntu1804: ami-0fa93af33951a2c8b
    us-east-2:
      Ubuntu1804: ami-0f380e43ca326a27a
    us-west-1:
      Ubuntu1804: ami-07623f026ab5630b2
    us-west-2:
      Ubuntu1804: ami-021934f0ccadab830
  WSO2ISAMIRegionMap:
    ap-southeast-2:
      CentOS7: ami-0211f0ecd0e693937
      Ubuntu1804: ami-0fc37bfc486b80d6d
    eu-west-1:
      CentOS7: ami-08137d567f9e9413e
      Ubuntu1804: ami-005de30fe41bbe8f3
    us-east-1:
      CentOS7: ami-09d4e63ccc46083c7
      Ubuntu1804: ami-02a2048d0e4afcd10
    us-east-2:
      CentOS7: ami-009ac95229cc07041
      Ubuntu1804: ami-0a1af21a7b34de8f7
    us-west-1:
      CentOS7: ami-0062ecf9cd0c8417d
      Ubuntu1804: ami-02cfec9ab1330bcbb
    us-west-2:
      CentOS7: ami-0cbe0a37066de0538
      Ubuntu1804: ami-0cc3da810abe655e0
  DBEngineMap:
    MySQL-5.7:
      DBEngine: "mysql_5.7"
    MySQL-5.6:
      DBEngine: "mysql_5.6"
    Postgres-9.6:
      DBEngine: "postgres_9.6"
    Postgres-10.5:
      DBEngine: "postgres_10.5"
    SQLServer-SE-13.00:
      DBEngine: "sqlserver-se_13.00"
    SQLServer-SE-14.00:
      DBEngine: "sqlserver-se_14.00"
    Oracle-SE1-11.2:
      DBEngine: "oracle-se1_11.2"
    Oracle-SE2-12.1:
      DBEngine: "oracle-se2_12.1"
Conditions:
  UseSQLServerDB: !Equals [sqlserver-se, !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]]
  UseLicensedVersion: !Or [ !Equals [sqlserver, !Select [0, !Split ["-", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]], !Equals [oracle, !Select [0, !Split ["-", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]] ]
